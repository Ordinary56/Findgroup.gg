// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Findgroup_Backend.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUser = IdentityUserEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, identityUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, identityUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, identityUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, identityUser);

            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserEntityType.CreateAnnotations(identityUser);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);

            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.11");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "longtext", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "varchar(255)", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "varchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Name", nameColumnBase);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "varchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn = new Column("Id", "varchar(255)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "longtext", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var nameColumn = new Column("Name", "varchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn);
            var normalizedNameColumn = new Column("NormalizedName", "varchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "longtext", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "longtext", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase0);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "varchar(255)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn0 = new Column("Id", "int", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn0);
            var claimTypeColumn = new Column("ClaimType", "longtext", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "longtext", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "varchar(255)", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn0 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings0.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUser = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUser")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "int", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "longtext", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "varchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "tinyint(1)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("Id", idColumnBase1);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "tinyint(1)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "datetime(6)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "varchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "varchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "longtext", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "longtext", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "tinyint(1)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "longtext", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "tinyint(1)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "varchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUser", microsoftAspNetCoreIdentityIdentityUserTableBase);
            var microsoftAspNetCoreIdentityIdentityUserMappingBase = new TableMappingBase<ColumnMappingBase>(identityUser, microsoftAspNetCoreIdentityIdentityUserTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityUser.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, identityUser.FindProperty("AccessFailedCount")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, identityUser.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, identityUser.FindProperty("Email")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, identityUser.FindProperty("EmailConfirmed")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, identityUser.FindProperty("LockoutEnabled")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, identityUser.FindProperty("LockoutEnd")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, identityUser.FindProperty("NormalizedEmail")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, identityUser.FindProperty("NormalizedUserName")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, identityUser.FindProperty("PasswordHash")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, identityUser.FindProperty("PhoneNumber")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, identityUser.FindProperty("PhoneNumberConfirmed")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, identityUser.FindProperty("SecurityStamp")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, identityUser.FindProperty("TwoFactorEnabled")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, identityUser.FindProperty("UserName")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn1 = new Column("Id", "varchar(255)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn1);
            var accessFailedCountColumn = new Column("AccessFailedCount", "int", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "longtext", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var emailColumn = new Column("Email", "varchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "tinyint(1)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "tinyint(1)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "datetime(6)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "varchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "varchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "longtext", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "longtext", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "tinyint(1)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var securityStampColumn = new Column("SecurityStamp", "longtext", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "tinyint(1)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn = new Column("UserName", "varchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn1 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(identityUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings1.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, identityUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, identityUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, identityUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, identityUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, identityUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, identityUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, identityUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, identityUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, identityUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, identityUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, identityUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, identityUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, identityUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, identityUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "longtext", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "longtext", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase2);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn2 = new Column("Id", "int", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn2);
            var claimTypeColumn0 = new Column("ClaimType", "longtext", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "longtext", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "varchar(255)", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn2 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings2.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "longtext", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "varchar(255)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "varchar(255)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "longtext", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "varchar(255)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings3.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn1 = new Column("UserId", "varchar(255)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn1);
            var roleIdColumn0 = new Column("RoleId", "varchar(255)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn1, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings4.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase0);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "varchar(255)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "longtext", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings5.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings5 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "varchar(255)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn2);
            var loginProviderColumn0 = new Column("LoginProvider", "varchar(255)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn0 = new Column("Name", "varchar(255)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn0);
            var valueColumn = new Column("Value", "longtext", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn2, loginProviderColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings5.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
